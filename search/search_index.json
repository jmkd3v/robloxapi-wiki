{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Documenting the internals of the Roblox API.</p>"},{"location":"#welcome","title":"Welcome","text":"<p>This is the wiki for the RoAPI community. RoAPI is a community dedicated to using and making discoveries with the Roblox API. On this wiki, you'll find a number of articles about the niche and somewhat hidden parts of the Roblox API.</p> <p>Learn everything you need to know about the API in the Tutorial!</p>"},{"location":"cdn-hashes/","title":"CDN hashes","text":"<p>Some endpoints, like the imageUrl provided by <code>thumbnails.roblox.com/v1/users/avatar-3d?userId=1</code>, don't provide a full CDN URL and only provide raw hashes, like this: <code>bbdb80c2b573bf222da3e92f5f148330</code>. We need to turn this into a full CDN URL.  A CDN URL looks like <code>t[X].rbxcdn.com/bbdb80c2b573bf222da3e92f5f148330</code> where X is the CDN number. The CDN number ranges from 0 to 7, so you might be tempted to send a request to t0, then t1, and keep going until you reach the one containing the object. This works, but it's quite wasteful as you send up to 8 requests for one object.</p>  https:// t c X.rbxcdn.com/ <p>A common implementation is as follows: Create a function that takes in a string <code>hash</code>. In this function, define <code>x</code> to <code>31</code>. Next, we loop through the first 32 characters in <code>hash</code>, and in each iteration set the <code>x</code> variable to itself bitwise  XORed against the integer representation of that character (<code>x ^= chr</code>). Then we return <code>x</code>.</p> <p>We can then use the <code>x</code> variable to compose the final URL with the pattern <code>https://t{x}.rbxcdn.com/{hash}</code>.</p> <p>Here are some test cases for this function: <pre><code>func(\"bbdb80c2b573bf222da3e92f5f148330\") -&gt; 5\nfunc(\"139602eb7c640c43833470e07caada4a\") -&gt; 7\nfunc(\"b717c50234c3d91b0be7dbfc9c588ed4\") -&gt; 0\n</code></pre></p>"},{"location":"cdn-hashes/#examples","title":"Examples","text":"PythonGolangElixir64 bit NASM AssemblyJavaScriptC#RubyC++CRustLua 5.3Lua 5.2/LuauJavaKotlinCrystalF#PowerShell <pre><code>def get_cdn_url(hash):\ni = 31\nfor char in hash[:32]:\n    i ^= ord(char)  # i ^= int(char, 16) also works\nreturn f\"https://t{i%8}.rbxcdn.com/{hash}\"\n\n# alternatively:\nfrom functools import reduce\n\ndef get_cdn_url(hash):\n    t = reduce(lambda last_code, char: last_code ^ ord(char), hash, 31)\n\n    return f\"https://t{t % 8}.rbxcdn.com/{hash}\"\n</code></pre> <pre><code>package pkg\n\nimport \"fmt\"\n\n// GetCdnUrl\nfunc GetCdnUrl(hash string) string {\nif hash == \"\" {\npanic(\"hash is empty\")\n}\n\nvar i int = 31\n\nfor _, char := range hash {\ni = i ^ int(char)\n}\n\nreturn fmt.Sprintf(\"https://t%d.rbxcdn.com/%s\", i%8, hash)\n}\n</code></pre> <pre><code>defmodule CDN do\n@spec get_cdn_url(String.t()) :: String.t()\ndef get_cdn_url(hash) do\nt = hash\n|&gt; String.to_charlist\n|&gt; Enum.reduce(31, fn char, last_code -&gt; Bitwise.bxor(last_code, char) end)\n\n\"https://t#{rem(t, 8)}.rbxcdn.com/#{hash}\"\nend\nend\n</code></pre> <pre><code>; nasm -felf64 cdn_hash.asm -o cdn_hash.o\n; gcc -m64 -o cdn_hash cdn_hash.o -no-pie\n; ./cdn_hash\nextern printf, snprintf\n\nsection .text\nglobal main\n\nget_cdn_url:\npush rdi\npush rsi\npush rdx\npush rcx\npush r8\npush rax\n\n; rdi is the accumulator\nmov rdi, 31\n\njmp .is_at_end\n\n.xor_t:\npush rax\n; rax is 8 bytes, get the first byte by AND'ing it by 255\nmov rax, [rax]\nand rax, 0xFF\nxor rdi, rax\npop rax\n\n; increment hash pointer\ninc rax\n\n.is_at_end:\ncmp byte[rax], 0\njne .xor_t\n\n.fmt_cdn_url:\nmov rax, rdi\nxor rdx, rdx\nmov rsi, 8\ndiv rsi\n\n; t\nmov rcx, rdx\n; buffer\nlea rdi, [cdn_url]\n; buffer size\nmov rsi, 55\n; format\nlea rdx, [url_fmt]\n; hash\npop rax\nmov r8, rax\npush rax\nxor rax, rax\ncall snprintf\n\npop rax\npop r8\npop rcx\npop rdx\npop rsi\npop rdi\n\nret\n\nmain:\nlea rax, [hash]\ncall get_cdn_url\n\nlea rdi, [s_fmt]\nlea rsi, [cdn_url]\nxor rax, rax\ncall printf\n\nmov rax, 60\nmov rdi, 0\nsyscall\n\nsection .data\ncdn_url: times 55 db 0\ns_fmt: db \"%s\", 10, 0\nurl_fmt: db \"https://t%d.rbxcdn.com/%s\", 0\nhash: db \"bbdb80c2b573bf222da3e92f5f148330\", 0\n</code></pre> <pre><code>const getCdnUrl = (hash) =&gt; {\nconst t = [...hash].reduce((lastCode, char) =&gt; lastCode ^ char.charCodeAt(0), 31)\n\nreturn `https://t${t % 8}.rbxcdn.com/${hash}`;\n}\n</code></pre> <pre><code>using System;\nusing System.Linq;\n\nstring GetCdnUrl(string hash) {\nint t =  hash.ToCharArray().Aggregate(31, (lastCode, character) =&gt; lastCode ^ (int)character);\n\nreturn $\"https://t{t % 8}.rbxcdn.com/{hash}\";\n}\n</code></pre> <pre><code>def get_cdn_url(hash)\nt = hash.codepoints.reduce(31) { |last_code, code| last_code ^ code }\n\"https://t#{t % 8}.rbxcdn.com/#{hash}\"\nend\n</code></pre> <pre><code>std::string getCdnUrl(const std::string&amp; hash)\n{\nif (hash.empty()) throw std::exception(\"Hash cannot be empty\");\n\nint i = 31;\n\nfor (char const&amp; c : hash)\n{\ni ^= (int)c;\n}\n\nchar buff[100];\nsnprintf(buff, sizeof(buff), \"https://t%d.rbxcdn.com/%s\", i % 8, hash.c_str());\n\nreturn std::string(buff);\n}\n</code></pre> <pre><code>void getCdnUrl(char *hash, char *buffer) {\nint i = 31;\nint hashLength = strlen(hash);\nfor (int j = 0; j &lt; hashLength; j++) {\ni ^= (int)hash[j];\n}\n\nsnprintf(buffer, 55, \"https://t%d.rbxcdn.com/%s\", i % 8, hash);\n}\n</code></pre> <pre><code>fn get_cdn_url(hash: &amp;str) -&gt; String {\nlet t = hash.as_bytes().iter().fold(31, |last_code, code| {\nlast_code ^ code\n});\n\nformat!(\"https://t{}.rbxcdn.com/{}\", t % 8, hash)\n}\n</code></pre> <pre><code>local function getCdnUrl(hash)\n    local i = 31\n    for _, code in utf8.codes(hash) do\n        i = i ~ code\n    end\n\n    return string.format(\"https://t%d.rbxcdn.com/%s\", i % 8, hash)\nend\n</code></pre> <pre><code>local function getCdnUrl(hash)\n    local i = 31\n    for _, code in utf8.codes(hash) do\n        i = bit32.bxor(i, code)\n    end\n\n    return string.format(\"https://t%d.rbxcdn.com/%s\", i % 8, hash)\nend\n</code></pre> <pre><code>String getCdnUrl(String hash) {\nint i = 31;\nfor (char character : hash.toCharArray()) {\ni ^= (int) character;\n}\n\nreturn String.format(\"https://t%d.rbxcdn.com/%s\", i % 8, hash);\n}\n</code></pre> <pre><code>fun getCdnUrl(hash: String): String {\nvar i = 31\nhash.forEach({ character: Char -&gt;\ni = i xor character.toInt()\n});\n\nreturn \"https://t${i % 8}.rbxcdn.com/${hash}\"\n}\n</code></pre> <pre><code>def get_cdn_url(hash : String): String\nt = hash.codepoints.reduce(31) { |last_code, code| last_code ^ code }\n\"https://t#{t % 8}.rbxcdn.com/#{hash}\"\nend\n</code></pre> <pre><code>let getCdnUrl (hash: string) =\nlet t = hash |&gt; Seq.fold (fun lastCode char -&gt; lastCode ^^^ (int)char) 31\n\n$\"https://t{t % 8}.rbxcdn.com/{hash}\"\n</code></pre> <pre><code>function get-cdn-url {\n    param (\n        [string] $hash\n    )\n\n    if ([string]::IsNullOrEmpty($hash)) { throw [System.ArgumentNullException]::new(\"hash\"); }\n\n    [int] $i = 31;\n\n    foreach ($c in $hash.ToCharArray()) {\n        $i = $i -bxor $c;\n    }\n\n    return \"https://t$($i % 8).rbxcdn.com/$($hash)\"\n}\n</code></pre>"},{"location":"list-of-asset-types/","title":"List of asset types","text":"ID Name 1 Image 2 T-Shirt 3 Audio 4 Mesh 5 Lua 6 HTML 7 Text 8 Hat 9 Place 10 Model 11 Shirt 12 Pants 13 Decal 16 Avatar 17 Head 18 Face 19 Gear 21 Badge 22 Group Emblem 24 Animation 25 Arms 26 Legs 27 Torso 28 Right Arm 29 Left Arm 30 Left Leg 31 Right Leg 32 Package 33 YouTubeVideo 34 Pass 35 App 37 Code 38 Plugin 39 SolidModel 40 MeshPart 41 Hair Accessory 42 Face Accessory 43 Neck Accessory 44 Shoulder Accessory 45 Front Accessory 46 Back Accessory 47 Waist Accessory 48 Climb Animation 49 Death Animation 50 Fall Animation 51 Idle Animation 52 Jump Animation 53 Run Animation 54 Swim Animation 55 Walk Animation 56 Pose Animation 59 LocalizationTableManifest 60 LocalizationTableTranslation 61 Emote Animation 62 Video 63 TexturePack 64 T-Shirt Accessory 65 Shirt Accessory 66 Pants Accessory 67 Jacket Accessory 68 Sweater Accessory 69 Shorts Accessory 70 Left Shoe Accessory 71 Right Shoe Accessory 72 Dress Skirt Accessory 73 Font Family 74 Font Face 75 MeshHiddenSurfaceRemoval 76 Eyebrow Accessory 77 Eyelash Accessory 78 Mood Animation 79 Dynamic Head 80 CodeSnippet"},{"location":"list-of-game-templates/","title":"List of game templates","text":"<p>All information fetched from <code>https://develop.roblox.com/v1/gametemplates</code>. Downloads are from the Roblox official CDN. Downloads will not have an <code>.rbxl</code> extension, but they are rbxl files.</p> Name Type Created Updated  Racing  Gameplay 02/12/2015 04/04/2019  Obby  Gameplay 01/14/2015 04/05/2019  Line Runner  Gameplay 09/28/2015 04/04/2019  Capture The Flag  Gameplay 11/01/2013 04/04/2019  Team/FFA Arena  Gameplay 09/28/2015 11/19/2019  Combat  Gameplay 01/14/2015 11/19/2019  Baseplate  Generic 11/01/2013 07/08/2019  Classic Baseplate  Generic 03/23/2021 04/16/2021  Flat Terrain  Generic 11/01/2013 07/08/2019  Move It Simulator  Generic 07/15/2020 07/15/2020  Mansion of Wonder  Generic 06/10/2021 06/10/2021  Concert  Theme 07/18/2022 07/18/2022  Village  Theme 10/10/2016 11/19/2019  Castle  Theme 01/14/2015 04/04/2019  Suburban  Theme 02/19/2016 06/20/2019  Pirate Island  Theme 07/01/2015 04/05/2019  City  Theme 01/14/2015 04/04/2019  Starting Place  Theme 03/09/2016 04/05/2019"},{"location":"list-of-libraries/","title":"List of libraries","text":"<p>The Roblox API is powerful, but it can be frustrating to use without any help. Instead of sending requests on your own, consider using a Roblox API \"wrapper\" library. These libraries send requests for you and can help you create apps faster.</p> <p>If none of these libraries are your thing, continue to the Tutorial to learn how to send requests on your own.</p> Name Language Links ro.py  Python 3  Source  Docs bloxy  JavaScript  Source  Docs noblox.js  JavaScript  Source  Docs dynablox_opencloud  JavaScript  Source  Docs"},{"location":"tutorial/","title":"Get started","text":"<p>Note</p> <p>This tutorial covers usage of Roblox's \"BEDEV1\" APIs, which are much more comprehensive than the newer \"Open Cloud\" APIs. Consider checking Roblox's official Open Cloud docs to see if your usecase is supported.</p> <p>There are two main ways you\u2019ll want to access the Roblox API: sending the requests yourself or using one of the API  wrappers available for your programming language of choice. </p> <p>This tutorial covers sending requests yourself. Before you attempt this, it is encouraged that you take a look at the List of libraries and see if any libraries cover your use case.</p>"},{"location":"tutorial/understanding-documentation/","title":"Understanding documentation","text":"<p>Each documentation page contains a list of public endpoints available on that domain and information about how to use them.</p>"},{"location":"tutorial/understanding-documentation/#accessing-documentation","title":"Accessing documentation","text":"<p>The Roblox API is broken down into services, like <code>users</code>, <code>groups</code>, and <code>friends</code>. In general, each service has endpoints that generally involve one main concept, like \"user information\" or \"friend management\".</p> <p>Each service has a separate subdomain on <code>roblox.com</code>, like <code>users.roblox.com</code> or <code>friends.roblox.com</code>. The documentation for that service is available via the <code>/docs</code> route, like https://users.roblox.com/docs.  Not all services have available documentation, and not all endpoints on those services are visible.</p> <p>To find the service you need, see List of services.</p>"},{"location":"tutorial/understanding-documentation/#endpoint-documentation","title":"Endpoint documentation","text":"<p>Documentation for all types of requests will always contain the following:  </p> <ul> <li>The text in top left corner and the background color differ depending on the method of the request.</li> <li>Example Value contains an example of what the response from this endpoint might look like.</li> <li>Response Content Type determines what should be passed to the <code>Accept</code> header.   Usually you'll want this to be <code>application/json</code>.</li> <li>Parameters determines what data is passed to the endpoint when sending the request.    The Parameter Type determines how the parameter will be passed to the endpoint, like as a query string or    as a part of the URL.</li> <li>Response Messages explain what different endpoint status codes mean when they are returned from this endpoint.</li> <li>The \"Try it out!\" button sends a request to this endpoint with the specified parameters.</li> </ul> <p></p> <p>Requests with a body, like POST, PUT, PATCH, and DELETE, have an additional parameter labelled <code>request</code> which contains the request body.</p> <p>You can also change the body's content type. In almost all cases this should remain set to <code>application/json</code>.  The \"Example Value\" contains an example of the data you should provide in the request body. Clicking on that Example Value will set the body to the example data. This is useful for quickly testing an endpoint before implementing it into your program.</p>"}]}